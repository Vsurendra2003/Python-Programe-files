Exercise 1: Calculate the multiplication and sum of two numbers
Given two integer numbers, return their product only if the product is equal to or lower than 1000. Otherwise, return their sum.

Given 1:              

number1 = 20
number2 = 30

Given 2:

number1 = 40
number2 = 30

Answer

def multiplication_or_sum(num1, num2):
    return num1 * num2 if num1 * num2 <= 1000 else num1 + num2

print("The result is", multiplication_or_sum(20, 30))
print("The result is", multiplication_or_sum(40, 30))


Exercise 2: Print the sum of the current number and the previous number

Write a program to iterate the first 10 numbers, and in each iteration, print the sum of the current and previous number.

Answer

print("Printing current and previous number and their sum in a range(10)")
previous_num = 0
for i in range(1, 11):
    x_sum = previous_num + i
    print("Current Number", i, "Previous Number ", previous_num, " Sum: ", x_sum)
    previous_num = i


Exercise 3: Print characters from a string that are present at an even index number
Write a program to accept a string from the user and display characters that are present at an even index number.

For example, str = "pynative" so you should display ‘p’, ‘n’, ‘t’, ‘v’.

Answer

word = input('Enter word ')
print("Original String:", word)
x = list(word)
for i in x[0::2]:
    print(i)

Exercise 4: Remove first n characters from a string
Write a program to remove characters from a string starting from zero up to n and return a new string.

For example:

remove_chars("pynative", 4) so output must be tive. Here, we need to remove the first four characters from a string.
remove_chars("pynative", 2) so output must be native. Here, we need to remove the first two characters from a string.
Note: n must be less than the length of the string.

Answer


def remove_chars(word, n):
    return word[n:]
print("Removing characters from a string")
print(remove_chars("pynative", 4))
print(remove_chars("pynative", 2))


Exercise 5: Check if the first and last number of a list is the same

Write a function to return True if the first and last number of a given list is same. If numbers are different then return False.

Given:

numbers_x = [10, 20, 30, 40, 10]
numbers_y = [75, 65, 35, 75, 30]

Answer

def first_last_same(numberList):
    print("Given list:", numberList)
    first_num = numberList[0]
    last_num = numberList[-1]
    if first_num == last_num:
        return True
    else:
        return False
numbers_x = [10, 20, 30, 40, 10]
print("result is", first_last_same(numbers_x))

numbers_y = [75, 65, 35, 75, 30]
print("result is", first_last_same(numbers_y))



Exercise 6: Display numbers divisible by 5 from a list
Iterate the given list of numbers and print only those numbers which are divisible by 5

Answer

num_list = [10, 20, 33, 46, 55]
print("Given list:", num_list)
print('Divisible by 5:')
for num in num_list:
    if num % 5 == 0:
        print(num)


Exercise 7: Return the count of a given substring from a string
Write a program to find how many times substring “Emma” appears in the given string.

Given:

str_x = "Emma is good developer. Emma is a writer"

Answer

str_x = "Surendra is good developer. Surendra is a writer"
cnt = str_x.count("Surendra")
print(cnt)


Exercise 8: Print the following pattern
1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5

Answer

for num in range(10):
    for i in range(num):
        print (num, end=" ") 
    print("\n")



Exercise 9: Check Palindrome Number
Write a program to check if the given number is a palindrome number.

A palindrome number is a number that is the same after reverse. For example, 545, is the palindrome numbers

Answer

def palindrome(number):
    print("original number", number)
    original_num = number
    reverse_num = 0
    while number > 0:
        reminder = number % 10
        reverse_num = (reverse_num * 10) + reminder
        number = number // 10
    if original_num == reverse_num:
        print("Given number palindrome")
    else:
        print("Given number is not palindrome")
palindrome(121)
palindrome(125)



Exercise 10: Create a new list from two list using the following condition

Create a new list from two list using the following condition

Given two list of numbers, write a program to create a new list such that the new list should contain odd numbers from the first list and even numbers from the second list.

Given:

list1 = [10, 20, 25, 30, 35]
list2 = [40, 45, 60, 75, 90]

Answer



def merge_list(list1, list2):
    result_list = []
    for num in list1:
        if num % 2 != 0:
            result_list.append(num)
    for num in list2:
        if num % 2 == 0:
            result_list.append(num)
    return result_list
list1 = [10, 20, 25, 30, 35]
list2 = [40, 45, 60, 75, 90]
print("result list:", merge_list(list1, list2))


Exercise 11: Write a Program to extract each digit from an integer in the reverse order.
For example, If the given int is 7536, the output shall be “6 3 5 7“, with a space separating the digits.

Answer

number = 7536
print("Given number", number)
print(" ".join(str(digit) for digit in reversed(str(number))))



Exercise 12: Calculate income tax for the given income by adhering to the rules below
Taxable Income	Rate (in %)
First $10,000	0
Next $10,000	10
The remaining	20

Answer

income = 45000
print("Given income", income)

if income <= 10000:
    tax_payable = 0
elif income <= 20000:
    tax_payable = (income - 10000) * 0.10
else:
    tax_payable = 1000 + (income - 20000) * 0.20

print("Total tax to pay is", tax_payable)


Exercise 13: Print multiplication table from 1 to 10


Answer

for i in range(1, 11):
    print(" ".join(str(i * j) for j in range(1, 11)))

Exercise 14: Print a downward Half-Pyramid Pattern of Star
 (asterisk)

Answer

for i in range(6, 0, -1):
    print("* " * (i - 1))


Exercise 15: Write a function called exponent(base, exp) that returns an int value of base raises to the power of exp.

Note here exp is a non-negative integer, and the base is an integer.


Answer

def exponent(base, exp):
    result = base ** exp
    print(base, "raises to the power of", exp, "is:", result)

exponent(5, 4)



















